{"version":3,"sources":["actions/types.ts","reducers/app-reducer.ts","reducers/index.ts","messages/index.ts","actions/index.ts","components/Header.tsx","helpers/transliteration.ts","helpers/czechify_uk.ts","helpers/englify_uk.ts","helpers/englify_ru.ts","components/Controls.tsx","helpers/index.ts","components/App.tsx","index.tsx"],"names":["changeAppLanguage","changeInputType","changeOutputType","changeInputText","changeOutputText","initialState","appLanguage","inputType","outputType","inputText","outputText","reducers","combineReducers","appReducer","state","action","type","types","payload","messages","en","appLanguageLbl","appLanguageOptEn","appLanguageOptUk","appLanguageOptRu","appTitle","bgnPcgnHelpText","inputLanguageLbl","inputLanguageOptUk","inputLanguageOptRu","outputLanguageLbl","outputLanguageOptEn","outputLanguageOptCz","outputLanguageOptPl","inputLanguagePlaceholder","uk","ru","lang","_Header","handleAppLanguageChange","event","target","props","value","this","className","htmlFor","id","onChange","message","rel","href","React","Component","Header","connect","isCharsEqual","nextChar","char","toLowerCase","isConsonant","czechifyUk","text","result","i","length","englifyUk","englifyRu","_Controls","handleInputTypeChange","handleOutputTypeChange","handleInputTextChange","prevProps","isInputTextChanged","isRuInputType","textInLowercase","indexOf","isRuInput","isUkInputType","isUkInput","isInputTypeChanged","isOutputTypeChanged","transliterate","disabled","Controls","_App","msgs","locale","defaultLocale","App","store","createStore","composeWithDevTools","applyMiddleware","logger","render","document","getElementById"],"mappings":"2LAAaA,EAAoB,sBACpBC,EAAkB,oBAClBC,EAAmB,qBACnBC,EAAkB,oBAClBC,EAAmB,qBCO1BC,EAAgC,CAClCC,YAAa,KACbC,UAAW,KACXC,WAAY,KACZC,UAAW,GACXC,WAAY,ICRHC,EAAWC,0BAA4B,CAChDC,WDUsB,WAAiD,IAAhDC,EAA+C,uDAAvCT,EAAcU,EAAyB,uCACtE,OAAQA,EAAOC,MACX,KAAKC,EACD,OAAO,2BACAH,GADP,IAEIR,YAAaS,EAAOG,UAE5B,KAAKD,EACD,OAAO,2BACAH,GADP,IAEIP,UAAWQ,EAAOG,UAE1B,KAAKD,EACD,OAAO,2BACAH,GADP,IAEIN,WAAYO,EAAOG,UAE3B,KAAKD,EACD,OAAO,2BACAH,GADP,IAEIL,UAAWM,EAAOG,UAE1B,KAAKD,EACD,OAAO,2BACAH,GADP,IAEIJ,WAAYK,EAAOG,UAE3B,QACI,OAAOJ,M,wCEKJK,EApDE,CACbC,GAAI,CACAC,eAAgB,WAChBC,iBAAkB,UAClBC,iBAAkB,YAClBC,iBAAkB,UAClBC,SAAU,qCACVC,gBAAiB,mDACjBC,iBAAkB,iBAClBC,mBAAoB,YACpBC,mBAAoB,UACpBC,kBAAmB,cACnBC,oBAAqB,UACrBC,oBAAqB,WACrBC,oBAAqB,WACrBC,yBAA0B,yBAE9BC,GAAI,CACAd,eAAgB,2BAChBC,iBAAkB,+DAClBC,iBAAkB,+DAClBC,iBAAkB,yDAClBC,SAAU,4JACVC,gBAAiB,wRACjBC,iBAAkB,gEAClBC,mBAAoB,+DACpBC,mBAAoB,yDACpBC,kBAAmB,sEACnBC,oBAAqB,iFACrBC,oBAAqB,2EACrBC,oBAAqB,2EACrBC,yBAA0B,4FAE9BE,GAAI,CACAf,eAAgB,2BAChBC,iBAAkB,+DAClBC,iBAAkB,+DAClBC,iBAAkB,6CAClBC,SAAU,wKACVC,gBACI,4TACJC,iBAAkB,4EAClBC,mBAAoB,+DACpBC,mBAAoB,6CACpBC,kBAAmB,kFACnBC,oBAAqB,6FACrBC,oBAAqB,uFACrBC,oBAAqB,uFACrBC,yBAA0B,mG,QCzCrBlC,EAAoB,SAACqC,GAAD,MAAiC,CAC9DrB,KAAMC,EACNC,QAASmB,I,OCKPC,E,4MACFC,wBAA0B,SAACC,GACvB,IAAMC,EAASD,EAAMC,OACrB,EAAKC,MAAM1C,kBAAkByC,EAAOE,Q,4CAGxC,WACI,IAAQrC,EAAgBsC,KAAKF,MAArBpC,YAER,OACI,yBAAQuC,UAAU,OAAlB,UACI,sBAAKA,UAAU,OAAf,UACI,wBAAOC,QAAQ,cAAcD,UAAU,OAAvC,UACI,cAAC,IAAD,CAAkBE,GAAG,mBADzB,OAGA,yBACIA,GAAG,cACHJ,MAAOrC,EACP0C,SAAUJ,KAAKL,wBAHnB,UAII,cAAC,IAAD,CAAkBQ,GAAG,mBAArB,SACK,SAACE,GAAD,OAAa,wBAAQN,MAAM,KAAd,SAAoBM,OAEtC,cAAC,IAAD,CAAkBF,GAAG,mBAArB,SACK,SAACE,GAAD,OAAa,wBAAQN,MAAM,KAAd,SAAoBM,OAEtC,cAAC,IAAD,CAAkBF,GAAG,mBAArB,SACK,SAACE,GAAD,OAAa,wBAAQN,MAAM,KAAd,SAAoBM,aAI9C,6BACI,cAAC,IAAD,CAAkBF,GAAG,eAEzB,8BACI,cAAC,IAAD,CAAkBA,GAAG,oBADzB,QAEI,mBACIF,UAAU,aACVJ,OAAO,SACPS,IAAI,sBACJC,KAAK,sDAJT,gC,GAnCEC,IAAMC,WAsDfC,EAASC,aANE,SAACzC,GAGrB,MAAO,CAAER,YAFeQ,EAAMD,WAAtBP,eAKmC,CAAEN,qBAA3BuD,CAAgDjB,GCpEzDkB,EAAe,SAACC,EAAkBC,GAAnB,OACxBA,EAAKC,gBAAkBF,EAASE,eAEvBC,EAAc,SAACF,GAAD,OACvBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WACnBF,EAAaE,EAAM,WCwRRG,EA7SI,SAACC,GAGhB,IAFA,IAAIC,EAAS,GAEJC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IACb,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,IAAcJ,EAAYE,EAAKE,EAAI,IACxCD,GAAU,KAGE,WAAZD,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,IAAcR,EAAaM,EAAKE,EAAI,GAAI,UAC7CD,GAAU,OAGE,WAAZD,EAAKE,GAIO,WAAZF,EAAKE,GAKO,WAAZF,EAAKE,KACJR,EAAaM,EAAKE,EAAI,GAAI,WAAQR,EAAaM,EAAKE,EAAI,GAAI,aAIjD,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,IAAcR,EAAaM,EAAKE,EAAI,GAAI,UAC7CD,GAAU,OAGE,WAAZD,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,IAAcJ,EAAYE,EAAKE,EAAI,IACxCD,GAAU,KAGE,WAAZD,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,IAAcJ,EAAYE,EAAKE,EAAI,IACxCD,GAAU,KAGE,WAAZD,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,IAA0B,MAAZF,EAAKE,GAK5BD,GAAUD,EAAKE,GAJXD,GAAU,GAJVA,GAAU,SAJVA,GAAU,KARVA,GAAU,KAJVA,GAAU,KARVA,GAAU,KAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IARVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,KAVVA,GAAU,IAJVA,GAAU,IARVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,KAJVA,GAAU,KAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,KARVA,GAAU,KAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,KAJVA,GAAU,KAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,SAJVA,GAAU,SAJVA,GAAU,eAJVA,GAAU,eAJVA,GAAU,SAJVA,GAAU,SAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,SAJVA,GAAU,SAqSlB,OAAOA,GCXIG,EA/RG,SAACJ,GAGf,IAFA,IAAIC,EAAS,GAEJC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IACb,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,IAAcJ,EAAYE,EAAKE,EAAI,IACxCD,GAAU,KAGE,WAAZD,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,IAAcJ,EAAYE,EAAKE,EAAI,IACxCD,GAAU,KAGE,WAAZD,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,IAAcJ,EAAYE,EAAKE,EAAI,IACxCD,GAAU,KAGE,WAAZD,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,IAA0B,MAAZF,EAAKE,GAK5BD,GAAUD,EAAKE,GAJXD,GAAU,GAJVA,GAAU,IAJVA,GAAU,KARVA,GAAU,KAJVA,GAAU,KARVA,GAAU,KAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,KAJVA,GAAU,KAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,KARVA,GAAU,KAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,KAJVA,GAAU,KAJVA,GAAU,KAJVA,GAAU,KAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,KAJVA,GAAU,KAJVA,GAAU,OAJVA,GAAU,OAJVA,GAAU,KAJVA,GAAU,KAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,KAJVA,GAAU,KAuRlB,OAAOA,GCDII,EA3RG,SAACL,GAGf,IAFA,IAAIC,EAAS,GAEJC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IACb,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,IAAcJ,EAAYE,EAAKE,EAAI,IACxCD,GAAU,IAGE,WAAZD,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,IAAcJ,EAAYE,EAAKE,EAAI,IACxCD,GAAU,KAGE,WAAZD,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,IAAcJ,EAAYE,EAAKE,EAAI,IACxCD,GAAU,KAGE,WAAZD,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,GAIO,WAAZF,EAAKE,IAAcJ,EAAYE,EAAKE,EAAI,IACxCD,GAAU,SAGE,WAAZD,EAAKE,GAKTD,GAAUD,EAAKE,GAJXD,GAAU,UARVA,GAAU,UAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,eAJVA,GAAU,SAJVA,GAAU,KARVA,GAAU,KAJVA,GAAU,KARVA,GAAU,KAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,KARVA,GAAU,KAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,KAJVA,GAAU,KAJVA,GAAU,KAJVA,GAAU,KAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,KAJVA,GAAU,KAJVA,GAAU,OAJVA,GAAU,OAJVA,GAAU,KAJVA,GAAU,KAJVA,GAAU,IAJVA,GAAU,IAJVA,GAAU,KAJVA,GAAU,KAmRlB,OAAOA,GC9PLK,E,4MAyBFC,sBAAwB,SAAC7B,GACrB,IAAMC,EAASD,EAAMC,OACrB,EAAKC,MAAMzC,gBAAgBwC,EAAOE,Q,EAGtC2B,uBAAyB,SAAC9B,GACtB,IAAMC,EAASD,EAAMC,OACrB,EAAKC,MAAMxC,iBAAiBuC,EAAOE,Q,EAGvC4B,sBAAwB,SAAC/B,GACrB,IAAMC,EAASD,EAAMC,OACrB,EAAKC,MAAMvC,gBAAgBsC,EAAOE,Q,wDApCtC,SAAmB6B,GACf,MAA6C5B,KAAKF,MAA1CjC,EAAR,EAAQA,UAAWF,EAAnB,EAAmBA,UAAWC,EAA9B,EAA8BA,WAExBiE,EAAqBD,EAAU/D,YAAcA,EAC7CiE,EJGW,SAACZ,GACtB,IAAMa,EAAkBb,EAAKH,cAE7B,OACsC,IAAlCgB,EAAgBC,QAAQ,YACU,IAAlCD,EAAgBC,QAAQ,YACU,IAAlCD,EAAgBC,QAAQ,YACU,IAAlCD,EAAgBC,QAAQ,UIVFC,CAAUpE,GAC1BqE,EJTW,SAAChB,GACtB,IAAMa,EAAkBb,EAAKH,cAE7B,OACsC,IAAlCgB,EAAgBC,QAAQ,YACU,IAAlCD,EAAgBC,QAAQ,YACU,IAAlCD,EAAgBC,QAAQ,YACU,IAAlCD,EAAgBC,QAAQ,UIEFG,CAAUtE,GAC1BuE,EAAqBR,EAAUjE,YAAcA,EAC7C0E,EAAsBT,EAAUhE,aAAeA,EAEjDiE,GAAsBC,GACtB9B,KAAKF,MAAMzC,gBAAgB,MAG3BwE,GAAsBK,GACtBlC,KAAKF,MAAMzC,gBAAgB,OAG3BwE,GAAsBO,GAAsBC,IAC5CrC,KAAKF,MAAMtC,iBC3CM,SACzB0D,EACAvD,EACAC,GAEA,GAAkB,OAAdD,EACA,OAAQC,GACJ,IAAK,KACD,OAAOqD,EAAWC,GACtB,IAAK,KACD,OAAOI,EAAUJ,GAI7B,MAAkB,OAAdvD,EACO4D,EAAUL,GAGd,GD0BKoB,CAAczE,EAAWF,EAAWC,M,oBAoBhD,WACI,MAA6CoC,KAAKF,MAA1CnC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,WAAYC,EAA/B,EAA+BA,UAE/B,OACI,uBAAMoC,UAAU,OAAhB,UACI,oBAAGA,UAAU,OAAb,UACI,wBAAOC,QAAQ,YAAYD,UAAU,OAArC,UACI,cAAC,IAAD,CAAkBE,GAAG,qBADzB,OAGA,yBACIA,GAAG,YACHJ,MAAOpC,EACPyC,SAAUJ,KAAKyB,sBAHnB,UAII,cAAC,IAAD,CAAkBtB,GAAG,qBAArB,SACK,SAACE,GAAD,OAAa,wBAAQN,MAAM,KAAd,SAAoBM,OAEtC,cAAC,IAAD,CAAkBF,GAAG,qBAArB,SACK,SAACE,GAAD,OAAa,wBAAQN,MAAM,KAAd,SAAoBM,aAI9C,oBAAGJ,UAAU,OAAb,UACI,wBAAOC,QAAQ,aAAaD,UAAU,OAAtC,UACI,cAAC,IAAD,CAAkBE,GAAG,sBADzB,IACiD,OAEjD,yBACIA,GAAG,aACHJ,MAAOnC,EACPwC,SAAUJ,KAAK0B,uBACfa,SAAwB,OAAd5E,EAJd,UAKI,cAAC,IAAD,CAAkBwC,GAAG,sBAArB,SACK,SAACE,GAAD,OAAa,wBAAQN,MAAM,KAAd,SAAoBM,OAEvB,OAAd1C,GACG,qCACI,cAAC,IAAD,CAAkBwC,GAAG,sBAArB,SACK,SAACE,GAAD,OACG,wBAAQN,MAAM,KAAd,SAAoBM,OAG5B,cAAC,IAAD,CAAkBF,GAAG,sBAArB,SACK,SAACE,GAAD,OACG,wBAAQN,MAAM,KAAKwC,UAAQ,EAA3B,SACKlC,gBAQ7B,qBAAKJ,UAAU,OAAf,SACI,uBAAOC,QAAQ,wBAAf,SACI,cAAC,IAAD,CAAkBC,GAAG,iCAG7B,0BACIF,UAAU,gBACVE,GAAG,wBACHC,SAAUJ,KAAK2B,sBACf5B,MAAOlC,W,GApGH2C,IAAMC,WAqHjB+B,EAAW7B,aAVA,SAACzC,GACrB,MAA6CA,EAAMD,WAEnD,MAAO,CACHJ,UAHJ,EAAQA,UAIJF,UAJJ,EAAmBA,UAKfC,WALJ,EAA8BA,cASe,CAC7CP,gBNtI2B,SAACoC,GAAD,MAAiC,CAC5DrB,KAAMC,EACNC,QAASmB,IMqITnC,iBNlI4B,SAACmC,GAAD,MAAiC,CAC7DrB,KAAMC,EACNC,QAASmB,IMiITlC,gBN9H2B,SAAC2D,GAAD,MAAiC,CAC5D9C,KAAMC,EACNC,QAAS4C,IM6HT1D,iBN1H4B,SAAC0D,GAAD,MAAiC,CAC7D9C,KAAMC,EACNC,QAAS4C,KMoHWP,CAKrBa,GEnIGiB,E,4MACF9C,wBAA0B,SAACC,GACvB,IAAMC,EAASD,EAAMC,OACrB,EAAKC,MAAM1C,kBAAkByC,EAAOE,Q,4CAGxC,WACI,MAAoCC,KAAKF,MAAjCpC,EAAR,EAAQA,YAAaI,EAArB,EAAqBA,WAEfS,EACc,OAAhBb,EACMgF,EAAKlE,GACW,OAAhBd,EACAgF,EAAKnD,GACLmD,EAAKlD,GAEf,OACI,eAAC,IAAD,CACIjB,SAAUA,EACVoE,OAAQjF,EACRkF,cAAc,KAHlB,UAII,cAAClC,EAAD,IACA,cAAC8B,EAAD,IACA,8BAAM1E,W,GAvBH0C,IAAMC,WAsCZoC,EAAMlC,aATK,SAACzC,GACrB,MAAoCA,EAAMD,WAE1C,MAAO,CACHP,YAHJ,EAAQA,YAIJI,WAJJ,EAAqBA,cAQmB,CAAEV,qBAA3BuD,CAAgD8B,GChD7DK,EAAQC,sBACVhF,EACAiF,8BAAoBC,0BAAgBC,OAGxCC,iBACI,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACI,cAACD,EAAD,MAEJO,SAASC,eAAe,W","file":"static/js/main.5cdf0136.chunk.js","sourcesContent":["export const changeAppLanguage = 'CHANGE_APP_LANGUAGE';\r\nexport const changeInputType = 'CHANGE_INPUT_TYPE';\r\nexport const changeOutputType = 'CHANGE_OUTPUT_TYPE';\r\nexport const changeInputText = 'CHANGE_INPUT_TEXT';\r\nexport const changeOutputText = 'CHANGE_OUTPUT_TEXT';\r\n","import * as types from '../actions/types';\r\nimport { ChangeAction } from '../actions';\r\n\r\nexport interface AppInitialState {\r\n    appLanguage: string;\r\n    inputText: string;\r\n    inputType: string;\r\n    outputType: string;\r\n    outputText: string;\r\n}\r\n\r\nconst initialState: AppInitialState = {\r\n    appLanguage: 'en',\r\n    inputType: 'uk',\r\n    outputType: 'en',\r\n    inputText: '',\r\n    outputText: '',\r\n};\r\n\r\nexport const appReducer = (state = initialState, action: ChangeAction) => {\r\n    switch (action.type) {\r\n        case types.changeAppLanguage:\r\n            return {\r\n                ...state,\r\n                appLanguage: action.payload,\r\n            };\r\n        case types.changeInputType:\r\n            return {\r\n                ...state,\r\n                inputType: action.payload,\r\n            };\r\n        case types.changeOutputType:\r\n            return {\r\n                ...state,\r\n                outputType: action.payload,\r\n            };\r\n        case types.changeInputText:\r\n            return {\r\n                ...state,\r\n                inputText: action.payload,\r\n            };\r\n        case types.changeOutputText:\r\n            return {\r\n                ...state,\r\n                outputText: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { appReducer } from './app-reducer';\r\nimport { AppInitialState } from '../reducers/app-reducer';\r\n\r\ninterface StoreState {\r\n    appReducer: AppInitialState;\r\n}\r\n\r\nexport const reducers = combineReducers<StoreState>({\r\n    appReducer,\r\n});\r\n","const messages = {\r\n    en: {\r\n        appLanguageLbl: 'Language',\r\n        appLanguageOptEn: 'English',\r\n        appLanguageOptUk: 'Ukrainian',\r\n        appLanguageOptRu: 'Russian',\r\n        appTitle: 'Cyrillic to latin script converter',\r\n        bgnPcgnHelpText: '\"Englify\" option will convert cyrillic text into',\r\n        inputLanguageLbl: 'Input Language',\r\n        inputLanguageOptUk: 'Ukrainian',\r\n        inputLanguageOptRu: 'Russian',\r\n        outputLanguageLbl: 'Output Type',\r\n        outputLanguageOptEn: 'Englify',\r\n        outputLanguageOptCz: 'Czechify',\r\n        outputLanguageOptPl: 'Polonify',\r\n        inputLanguagePlaceholder: 'Cyrillic text here...',\r\n    },\r\n    uk: {\r\n        appLanguageLbl: 'Мова',\r\n        appLanguageOptEn: 'Англійська',\r\n        appLanguageOptUk: 'Українська',\r\n        appLanguageOptRu: 'Російська',\r\n        appTitle: 'Конвертор Кирилиці в Латинку',\r\n        bgnPcgnHelpText: 'Опція \"Англіфікувати\" сконвертує кирилицю в стандарт',\r\n        inputLanguageLbl: 'Вхідна Мова',\r\n        inputLanguageOptUk: 'Українська',\r\n        inputLanguageOptRu: 'Російська',\r\n        outputLanguageLbl: 'Вихідна Мова',\r\n        outputLanguageOptEn: 'Англіфікувати',\r\n        outputLanguageOptCz: 'Чехіфікувати',\r\n        outputLanguageOptPl: 'Полонізувати',\r\n        inputLanguagePlaceholder: 'Текст кирилицею...',\r\n    },\r\n    ru: {\r\n        appLanguageLbl: 'Язык',\r\n        appLanguageOptEn: 'Английский',\r\n        appLanguageOptUk: 'Украинский',\r\n        appLanguageOptRu: 'Русский',\r\n        appTitle: 'Конвертор Кириллицы в Латиницу',\r\n        bgnPcgnHelpText:\r\n            'Опция \"Англифицировать\" сконвертирует кириллицу в стандарт',\r\n        inputLanguageLbl: 'Входящий Язык',\r\n        inputLanguageOptUk: 'Украинский',\r\n        inputLanguageOptRu: 'Русский',\r\n        outputLanguageLbl: 'Выходящий Язык',\r\n        outputLanguageOptEn: 'Англифицировать',\r\n        outputLanguageOptCz: 'Чехифицировать',\r\n        outputLanguageOptPl: 'Полонизировать',\r\n        inputLanguagePlaceholder: 'Текст кириллицей...',\r\n    },\r\n};\r\n\r\nexport default messages;\r\n","import * as types from './types';\r\n\r\nexport interface ChangeAction {\r\n    type: string;\r\n    payload: string;\r\n}\r\n\r\nexport const changeAppLanguage = (lang: string): ChangeAction => ({\r\n    type: types.changeAppLanguage,\r\n    payload: lang,\r\n});\r\n\r\nexport const changeInputType = (lang: string): ChangeAction => ({\r\n    type: types.changeInputType,\r\n    payload: lang,\r\n});\r\n\r\nexport const changeOutputType = (lang: string): ChangeAction => ({\r\n    type: types.changeOutputType,\r\n    payload: lang,\r\n});\r\n\r\nexport const changeInputText = (text: string): ChangeAction => ({\r\n    type: types.changeInputText,\r\n    payload: text,\r\n});\r\n\r\nexport const changeOutputText = (text: string): ChangeAction => ({\r\n    type: types.changeOutputText,\r\n    payload: text,\r\n});\r\n","import React from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { changeAppLanguage } from '../actions';\r\n\r\ninterface HeaderProps {\r\n    appLanguage: string;\r\n    changeAppLanguage(lang: string): void;\r\n}\r\n\r\ninterface HeaderState {\r\n    appLanguage: string;\r\n}\r\n\r\nclass _Header extends React.Component<HeaderProps> {\r\n    handleAppLanguageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const target = event.target as HTMLSelectElement;\r\n        this.props.changeAppLanguage(target.value);\r\n    };\r\n\r\n    render(): React.ReactNode {\r\n        const { appLanguage } = this.props;\r\n\r\n        return (\r\n            <header className='mb-4'>\r\n                <div className='mb-3'>\r\n                    <label htmlFor='appLanguage' className='me-2'>\r\n                        <FormattedMessage id='appLanguageLbl' />:\r\n                    </label>\r\n                    <select\r\n                        id='appLanguage'\r\n                        value={appLanguage}\r\n                        onChange={this.handleAppLanguageChange}>\r\n                        <FormattedMessage id='appLanguageOptEn'>\r\n                            {(message) => <option value='en'>{message}</option>}\r\n                        </FormattedMessage>\r\n                        <FormattedMessage id='appLanguageOptUk'>\r\n                            {(message) => <option value='uk'>{message}</option>}\r\n                        </FormattedMessage>\r\n                        <FormattedMessage id='appLanguageOptRu'>\r\n                            {(message) => <option value='ru'>{message}</option>}\r\n                        </FormattedMessage>\r\n                    </select>\r\n                </div>\r\n                <h2>\r\n                    <FormattedMessage id='appTitle' />\r\n                </h2>\r\n                <p>\r\n                    <FormattedMessage id='bgnPcgnHelpText' /> &nbsp;\r\n                    <a\r\n                        className='text-white'\r\n                        target='_blank'\r\n                        rel=\"noopener noreferrer\"\r\n                        href='https://en.wikipedia.org/wiki/BGN/PCGN_romanization'>\r\n                        BGN/PCGN\r\n                    </a>\r\n                </p>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: { appReducer: HeaderState }) => {\r\n    const { appLanguage } = state.appReducer;\r\n\r\n    return { appLanguage };\r\n};\r\n\r\nexport const Header = connect(mapStateToProps, { changeAppLanguage })(_Header);\r\n","export const isCharsEqual = (nextChar: string, char: string): boolean =>\r\n    char.toLowerCase() === nextChar.toLowerCase();\r\n\r\nexport const isConsonant = (char: string): boolean =>\r\n    isCharsEqual(char, 'б') ||\r\n    isCharsEqual(char, 'в') ||\r\n    isCharsEqual(char, 'г') ||\r\n    isCharsEqual(char, 'д') ||\r\n    isCharsEqual(char, 'ж') ||\r\n    isCharsEqual(char, 'з') ||\r\n    isCharsEqual(char, 'к') ||\r\n    isCharsEqual(char, 'л') ||\r\n    isCharsEqual(char, 'м') ||\r\n    isCharsEqual(char, 'н') ||\r\n    isCharsEqual(char, 'п') ||\r\n    isCharsEqual(char, 'р') ||\r\n    isCharsEqual(char, 'с') ||\r\n    isCharsEqual(char, 'т') ||\r\n    isCharsEqual(char, 'ф') ||\r\n    isCharsEqual(char, 'х') ||\r\n    isCharsEqual(char, 'ц') ||\r\n    isCharsEqual(char, 'ч') ||\r\n    isCharsEqual(char, 'ш') ||\r\n    isCharsEqual(char, 'щ');\r\n\r\nexport const isUkInput = (text: string): boolean => {\r\n    const textInLowercase = text.toLowerCase();\r\n\r\n    return (\r\n        textInLowercase.indexOf('ї') !== -1 ||\r\n        textInLowercase.indexOf('ґ') !== -1 ||\r\n        textInLowercase.indexOf('є') !== -1 ||\r\n        textInLowercase.indexOf('і') !== -1\r\n    );\r\n};\r\n\r\nexport const isRuInput = (text: string): boolean => {\r\n    const textInLowercase = text.toLowerCase();\r\n\r\n    return (\r\n        textInLowercase.indexOf('ё') !== -1 ||\r\n        textInLowercase.indexOf('ы') !== -1 ||\r\n        textInLowercase.indexOf('ъ') !== -1 ||\r\n        textInLowercase.indexOf('э') !== -1\r\n    );\r\n};\r\n","import { isCharsEqual, isConsonant } from './transliteration';\r\n\r\nconst czechifyUk = (text: string): string => {\r\n    let result = '';\r\n\r\n    for (let i = 0; i < text.length; i++) {\r\n        if (text[i] === 'Ч') {\r\n            result += 'Č';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ч') {\r\n            result += 'č';\r\n            continue;\r\n        }\r\n        if (text[i] === 'В') {\r\n            result += 'V';\r\n            continue;\r\n        }\r\n        if (text[i] === 'в') {\r\n            result += 'v';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ш') {\r\n            result += 'Š';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ш') {\r\n            result += 'š';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Щ') {\r\n            result += 'Šč';\r\n            continue;\r\n        }\r\n        if (text[i] === 'щ') {\r\n            result += 'šč';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ж') {\r\n            result += 'Ž';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ж') {\r\n            result += 'ž';\r\n            continue;\r\n        }\r\n        if (text[i] === 'А') {\r\n            result += 'A';\r\n            continue;\r\n        }\r\n        if (text[i] === 'а') {\r\n            result += 'a';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Б') {\r\n            result += 'B';\r\n            continue;\r\n        }\r\n        if (text[i] === 'б') {\r\n            result += 'b';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ц') {\r\n            result += 'C';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ц') {\r\n            result += 'c';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Х') {\r\n            result += 'Ch';\r\n            continue;\r\n        }\r\n        if (text[i] === 'х') {\r\n            result += 'ch';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Д') {\r\n            result += 'D';\r\n            continue;\r\n        }\r\n        if (text[i] === 'д') {\r\n            result += 'd';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Є') {\r\n            result += 'Je';\r\n            continue;\r\n        }\r\n        if (text[i] === 'є' && isConsonant(text[i - 1])) {\r\n            result += 'ie';\r\n            continue;\r\n        }\r\n        if (text[i] === 'є') {\r\n            result += 'je';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Е') {\r\n            result += 'E';\r\n            continue;\r\n        }\r\n        if (text[i] === 'е') {\r\n            result += 'e';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ї') {\r\n            result += 'Ji';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ї') {\r\n            result += 'ji';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ф') {\r\n            result += 'F';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ф') {\r\n            result += 'f';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ґ') {\r\n            result += 'G';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ґ') {\r\n            result += 'g';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Г') {\r\n            result += 'H';\r\n            continue;\r\n        }\r\n        if (text[i] === 'г') {\r\n            result += 'h';\r\n            continue;\r\n        }\r\n        if (text[i] === 'І') {\r\n            result += 'I';\r\n            continue;\r\n        }\r\n        if (text[i] === 'і' && isCharsEqual(text[i + 1], 'й')) {\r\n            result += 'í';\r\n            continue;\r\n        }\r\n        if (text[i] === 'і') {\r\n            result += 'i';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Й') {\r\n            result += 'J';\r\n            continue;\r\n        }\r\n        if (\r\n            text[i] === 'й' &&\r\n            (isCharsEqual(text[i - 1], 'и') || isCharsEqual(text[i - 1], 'і'))\r\n        ) {\r\n            continue;\r\n        }\r\n        if (text[i] === 'й') {\r\n            result += 'j';\r\n            continue;\r\n        }\r\n        if (text[i] === 'К') {\r\n            result += 'K';\r\n            continue;\r\n        }\r\n        if (text[i] === 'к') {\r\n            result += 'k';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Л') {\r\n            result += 'L';\r\n            continue;\r\n        }\r\n        if (text[i] === 'л') {\r\n            result += 'l';\r\n            continue;\r\n        }\r\n        if (text[i] === 'М') {\r\n            result += 'M';\r\n            continue;\r\n        }\r\n        if (text[i] === 'м') {\r\n            result += 'm';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Н') {\r\n            result += 'N';\r\n            continue;\r\n        }\r\n        if (text[i] === 'н') {\r\n            result += 'n';\r\n            continue;\r\n        }\r\n        if (text[i] === 'О') {\r\n            result += 'O';\r\n            continue;\r\n        }\r\n        if (text[i] === 'о') {\r\n            result += 'o';\r\n            continue;\r\n        }\r\n        if (text[i] === 'П') {\r\n            result += 'P';\r\n            continue;\r\n        }\r\n        if (text[i] === 'п') {\r\n            result += 'p';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Р') {\r\n            result += 'R';\r\n            continue;\r\n        }\r\n        if (text[i] === 'р') {\r\n            result += 'r';\r\n            continue;\r\n        }\r\n        if (text[i] === 'С') {\r\n            result += 'S';\r\n            continue;\r\n        }\r\n        if (text[i] === 'с') {\r\n            result += 's';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Т') {\r\n            result += 'T';\r\n            continue;\r\n        }\r\n        if (text[i] === 'т') {\r\n            result += 't';\r\n            continue;\r\n        }\r\n        if (text[i] === 'У') {\r\n            result += 'U';\r\n            continue;\r\n        }\r\n        if (text[i] === 'у') {\r\n            result += 'u';\r\n            continue;\r\n        }\r\n        if (text[i] === 'И') {\r\n            result += 'Y';\r\n            continue;\r\n        }\r\n        if (text[i] === 'и' && isCharsEqual(text[i + 1], 'й')) {\r\n            result += 'ý';\r\n            continue;\r\n        }\r\n        if (text[i] === 'и') {\r\n            result += 'y';\r\n            continue;\r\n        }\r\n        if (text[i] === 'З') {\r\n            result += 'Z';\r\n            continue;\r\n        }\r\n        if (text[i] === 'з') {\r\n            result += 'z';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ю') {\r\n            result += 'Ju';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ю' && isConsonant(text[i - 1])) {\r\n            result += 'iu';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ю') {\r\n            result += 'ju';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Я') {\r\n            result += 'Ja';\r\n            continue;\r\n        }\r\n        if (text[i] === 'я' && isConsonant(text[i - 1])) {\r\n            result += 'ia';\r\n            continue;\r\n        }\r\n        if (text[i] === 'я') {\r\n            result += 'ja';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ь') {\r\n            result += '’';\r\n            continue;\r\n        }\r\n        if (text[i] === '’' || text[i] === \"'\") {\r\n            result += '';\r\n            continue;\r\n        }\r\n\r\n        result += text[i];\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default czechifyUk;\r\n","import { isConsonant } from './transliteration';\r\n\r\nconst englifyUk = (text: string): string => {\r\n    let result = '';\r\n\r\n    for (let i = 0; i < text.length; i++) {\r\n        if (text[i] === 'Ч') {\r\n            result += 'Ch';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ч') {\r\n            result += 'ch';\r\n            continue;\r\n        }\r\n        if (text[i] === 'В') {\r\n            result += 'V';\r\n            continue;\r\n        }\r\n        if (text[i] === 'в') {\r\n            result += 'v';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ш') {\r\n            result += 'Sh';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ш') {\r\n            result += 'sh';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Щ') {\r\n            result += 'Shch';\r\n            continue;\r\n        }\r\n        if (text[i] === 'щ') {\r\n            result += 'shch';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ж') {\r\n            result += 'Zh';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ж') {\r\n            result += 'zh';\r\n            continue;\r\n        }\r\n        if (text[i] === 'А') {\r\n            result += 'A';\r\n            continue;\r\n        }\r\n        if (text[i] === 'а') {\r\n            result += 'a';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Б') {\r\n            result += 'B';\r\n            continue;\r\n        }\r\n        if (text[i] === 'б') {\r\n            result += 'b';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ц') {\r\n            result += 'Ts';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ц') {\r\n            result += 'ts';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Х') {\r\n            result += 'Kh';\r\n            continue;\r\n        }\r\n        if (text[i] === 'х') {\r\n            result += 'kh';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Д') {\r\n            result += 'D';\r\n            continue;\r\n        }\r\n        if (text[i] === 'д') {\r\n            result += 'd';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Є') {\r\n            result += 'Ye';\r\n            continue;\r\n        }\r\n        if (text[i] === 'є' && isConsonant(text[i - 1])) {\r\n            result += 'ie';\r\n            continue;\r\n        }\r\n        if (text[i] === 'є') {\r\n            result += 'ye';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Е') {\r\n            result += 'E';\r\n            continue;\r\n        }\r\n        if (text[i] === 'е') {\r\n            result += 'e';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ї') {\r\n            result += 'Yi';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ї') {\r\n            result += 'yi';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ф') {\r\n            result += 'F';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ф') {\r\n            result += 'f';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ґ') {\r\n            result += 'G';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ґ') {\r\n            result += 'g';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Г') {\r\n            result += 'H';\r\n            continue;\r\n        }\r\n        if (text[i] === 'г') {\r\n            result += 'h';\r\n            continue;\r\n        }\r\n        if (text[i] === 'І') {\r\n            result += 'I';\r\n            continue;\r\n        }\r\n        if (text[i] === 'і') {\r\n            result += 'i';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Й') {\r\n            result += 'Y';\r\n            continue;\r\n        }\r\n        if (text[i] === 'й') {\r\n            result += 'y';\r\n            continue;\r\n        }\r\n        if (text[i] === 'К') {\r\n            result += 'K';\r\n            continue;\r\n        }\r\n        if (text[i] === 'к') {\r\n            result += 'k';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Л') {\r\n            result += 'L';\r\n            continue;\r\n        }\r\n        if (text[i] === 'л') {\r\n            result += 'l';\r\n            continue;\r\n        }\r\n        if (text[i] === 'М') {\r\n            result += 'M';\r\n            continue;\r\n        }\r\n        if (text[i] === 'м') {\r\n            result += 'm';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Н') {\r\n            result += 'N';\r\n            continue;\r\n        }\r\n        if (text[i] === 'н') {\r\n            result += 'n';\r\n            continue;\r\n        }\r\n        if (text[i] === 'О') {\r\n            result += 'O';\r\n            continue;\r\n        }\r\n        if (text[i] === 'о') {\r\n            result += 'o';\r\n            continue;\r\n        }\r\n        if (text[i] === 'П') {\r\n            result += 'P';\r\n            continue;\r\n        }\r\n        if (text[i] === 'п') {\r\n            result += 'p';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Р') {\r\n            result += 'R';\r\n            continue;\r\n        }\r\n        if (text[i] === 'р') {\r\n            result += 'r';\r\n            continue;\r\n        }\r\n        if (text[i] === 'С') {\r\n            result += 'S';\r\n            continue;\r\n        }\r\n        if (text[i] === 'с') {\r\n            result += 's';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Т') {\r\n            result += 'T';\r\n            continue;\r\n        }\r\n        if (text[i] === 'т') {\r\n            result += 't';\r\n            continue;\r\n        }\r\n        if (text[i] === 'У') {\r\n            result += 'U';\r\n            continue;\r\n        }\r\n        if (text[i] === 'у') {\r\n            result += 'u';\r\n            continue;\r\n        }\r\n        if (text[i] === 'И') {\r\n            result += 'Y';\r\n            continue;\r\n        }\r\n        if (text[i] === 'и') {\r\n            result += 'y';\r\n            continue;\r\n        }\r\n        if (text[i] === 'З') {\r\n            result += 'Z';\r\n            continue;\r\n        }\r\n        if (text[i] === 'з') {\r\n            result += 'z';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ю') {\r\n            result += 'Yu';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ю' && isConsonant(text[i - 1])) {\r\n            result += 'iu';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ю') {\r\n            result += 'yu';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Я') {\r\n            result += 'Ya';\r\n            continue;\r\n        }\r\n        if (text[i] === 'я' && isConsonant(text[i - 1])) {\r\n            result += 'ia';\r\n            continue;\r\n        }\r\n        if (text[i] === 'я') {\r\n            result += 'ya';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ь') {\r\n            result += \"'\";\r\n            continue;\r\n        }\r\n        if (text[i] === '’' || text[i] === \"'\") {\r\n            result += '';\r\n            continue;\r\n        }\r\n\r\n        result += text[i];\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default englifyUk;\r\n","import { isConsonant } from './transliteration';\r\n\r\nconst englifyRu = (text: string): string => {\r\n    let result = '';\r\n\r\n    for (let i = 0; i < text.length; i++) {\r\n        if (text[i] === 'Ч') {\r\n            result += 'Ch';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ч') {\r\n            result += 'ch';\r\n            continue;\r\n        }\r\n        if (text[i] === 'В') {\r\n            result += 'V';\r\n            continue;\r\n        }\r\n        if (text[i] === 'в') {\r\n            result += 'v';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ш') {\r\n            result += 'Sh';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ш') {\r\n            result += 'sh';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Щ') {\r\n            result += 'Shch';\r\n            continue;\r\n        }\r\n        if (text[i] === 'щ') {\r\n            result += 'shch';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ж') {\r\n            result += 'Zh';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ж') {\r\n            result += 'zh';\r\n            continue;\r\n        }\r\n        if (text[i] === 'А') {\r\n            result += 'A';\r\n            continue;\r\n        }\r\n        if (text[i] === 'а') {\r\n            result += 'a';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Б') {\r\n            result += 'B';\r\n            continue;\r\n        }\r\n        if (text[i] === 'б') {\r\n            result += 'b';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ц') {\r\n            result += 'Ts';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ц') {\r\n            result += 'ts';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Х') {\r\n            result += 'Kh';\r\n            continue;\r\n        }\r\n        if (text[i] === 'х') {\r\n            result += 'kh';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Д') {\r\n            result += 'D';\r\n            continue;\r\n        }\r\n        if (text[i] === 'д') {\r\n            result += 'd';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Е') {\r\n            result += 'Ye';\r\n            continue;\r\n        }\r\n        if (text[i] === 'е' && isConsonant(text[i - 1])) {\r\n            result += 'e';\r\n            continue;\r\n        }\r\n        if (text[i] === 'е') {\r\n            result += 'ye';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Э') {\r\n            result += 'E';\r\n            continue;\r\n        }\r\n        if (text[i] === 'э') {\r\n            result += 'e';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ф') {\r\n            result += 'F';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ф') {\r\n            result += 'f';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Г') {\r\n            result += 'G';\r\n            continue;\r\n        }\r\n        if (text[i] === 'г') {\r\n            result += 'g';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Й') {\r\n            result += 'Y';\r\n            continue;\r\n        }\r\n        if (text[i] === 'й') {\r\n            result += 'y';\r\n            continue;\r\n        }\r\n        if (text[i] === 'К') {\r\n            result += 'K';\r\n            continue;\r\n        }\r\n        if (text[i] === 'к') {\r\n            result += 'k';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Л') {\r\n            result += 'L';\r\n            continue;\r\n        }\r\n        if (text[i] === 'л') {\r\n            result += 'l';\r\n            continue;\r\n        }\r\n        if (text[i] === 'М') {\r\n            result += 'M';\r\n            continue;\r\n        }\r\n        if (text[i] === 'м') {\r\n            result += 'm';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Н') {\r\n            result += 'N';\r\n            continue;\r\n        }\r\n        if (text[i] === 'н') {\r\n            result += 'n';\r\n            continue;\r\n        }\r\n        if (text[i] === 'О') {\r\n            result += 'O';\r\n            continue;\r\n        }\r\n        if (text[i] === 'о') {\r\n            result += 'o';\r\n            continue;\r\n        }\r\n        if (text[i] === 'П') {\r\n            result += 'P';\r\n            continue;\r\n        }\r\n        if (text[i] === 'п') {\r\n            result += 'p';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Р') {\r\n            result += 'R';\r\n            continue;\r\n        }\r\n        if (text[i] === 'р') {\r\n            result += 'r';\r\n            continue;\r\n        }\r\n        if (text[i] === 'С') {\r\n            result += 'S';\r\n            continue;\r\n        }\r\n        if (text[i] === 'с') {\r\n            result += 's';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Т') {\r\n            result += 'T';\r\n            continue;\r\n        }\r\n        if (text[i] === 'т') {\r\n            result += 't';\r\n            continue;\r\n        }\r\n        if (text[i] === 'У') {\r\n            result += 'U';\r\n            continue;\r\n        }\r\n        if (text[i] === 'у') {\r\n            result += 'u';\r\n            continue;\r\n        }\r\n        if (text[i] === 'И') {\r\n            result += 'I';\r\n            continue;\r\n        }\r\n        if (text[i] === 'и') {\r\n            result += 'i';\r\n            continue;\r\n        }\r\n        if (text[i] === 'З') {\r\n            result += 'Z';\r\n            continue;\r\n        }\r\n        if (text[i] === 'з') {\r\n            result += 'z';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ю') {\r\n            result += 'Yu';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ю' && isConsonant(text[i - 1])) {\r\n            result += 'iu';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ю') {\r\n            result += 'yu';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Я') {\r\n            result += 'Ya';\r\n            continue;\r\n        }\r\n        if (text[i] === 'я' && isConsonant(text[i - 1])) {\r\n            result += 'ia';\r\n            continue;\r\n        }\r\n        if (text[i] === 'я') {\r\n            result += 'ya';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ь') {\r\n            result += '’';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ъ') {\r\n            result += '’’';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ы') {\r\n            result += 'Y';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ы') {\r\n            result += 'y';\r\n            continue;\r\n        }\r\n        if (text[i] === 'Ё') {\r\n            result += 'Yё';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ё' && isConsonant(text[i - 1])) {\r\n            result += 'ё';\r\n            continue;\r\n        }\r\n        if (text[i] === 'ё') {\r\n            result += 'yё';\r\n            continue;\r\n        }\r\n\r\n        result += text[i];\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default englifyRu;\r\n","import React from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { transliterate } from '../helpers';\r\nimport { isUkInput, isRuInput } from '../helpers/transliteration';\r\nimport {\r\n    changeInputType,\r\n    changeOutputType,\r\n    changeInputText,\r\n    changeOutputText,\r\n} from '../actions';\r\n\r\ninterface ControlsProps {\r\n    inputType: string;\r\n    outputType: string;\r\n    inputText: string;\r\n    changeInputType(lang: string): void;\r\n    changeOutputType(lang: string): void;\r\n    changeInputText(text: string): void;\r\n    changeOutputText(text: string): void;\r\n}\r\n\r\ninterface ControlsState {\r\n    inputType: string;\r\n    outputType: string;\r\n    inputText: string;\r\n}\r\n\r\nclass _Controls extends React.Component<ControlsProps> {\r\n    componentDidUpdate(prevProps: ControlsProps): void {\r\n        const { inputText, inputType, outputType } = this.props;\r\n\r\n        const isInputTextChanged = prevProps.inputText !== inputText;\r\n        const isRuInputType = isRuInput(inputText);\r\n        const isUkInputType = isUkInput(inputText);\r\n        const isInputTypeChanged = prevProps.inputType !== inputType;\r\n        const isOutputTypeChanged = prevProps.outputType !== outputType;\r\n\r\n        if (isInputTextChanged && isRuInputType) {\r\n            this.props.changeInputType('ru');\r\n        }\r\n\r\n        if (isInputTextChanged && isUkInputType) {\r\n            this.props.changeInputType('uk');\r\n        }\r\n\r\n        if (isInputTextChanged || isInputTypeChanged || isOutputTypeChanged) {\r\n            this.props.changeOutputText(\r\n                transliterate(inputText, inputType, outputType)\r\n            );\r\n        }\r\n    }\r\n\r\n    handleInputTypeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const target = event.target as HTMLSelectElement;\r\n        this.props.changeInputType(target.value);\r\n    };\r\n\r\n    handleOutputTypeChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const target = event.target as HTMLSelectElement;\r\n        this.props.changeOutputType(target.value);\r\n    };\r\n\r\n    handleInputTextChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        const target = event.target as HTMLTextAreaElement;\r\n        this.props.changeInputText(target.value);\r\n    };\r\n\r\n    render(): React.ReactNode {\r\n        const { inputType, outputType, inputText } = this.props;\r\n\r\n        return (\r\n            <form className='mb-4'>\r\n                <p className='mb-2'>\r\n                    <label htmlFor='inputType' className='me-2'>\r\n                        <FormattedMessage id='inputLanguageLbl' />:\r\n                    </label>\r\n                    <select\r\n                        id='inputType'\r\n                        value={inputType}\r\n                        onChange={this.handleInputTypeChange}>\r\n                        <FormattedMessage id='inputLanguageOptUk'>\r\n                            {(message) => <option value='uk'>{message}</option>}\r\n                        </FormattedMessage>\r\n                        <FormattedMessage id='inputLanguageOptRu'>\r\n                            {(message) => <option value='ru'>{message}</option>}\r\n                        </FormattedMessage>\r\n                    </select>\r\n                </p>\r\n                <p className='mb-4'>\r\n                    <label htmlFor='outputType' className='me-2'>\r\n                        <FormattedMessage id='outputLanguageLbl' />:{' '}\r\n                    </label>\r\n                    <select\r\n                        id='outputType'\r\n                        value={outputType}\r\n                        onChange={this.handleOutputTypeChange}\r\n                        disabled={inputType === 'ru'}>\r\n                        <FormattedMessage id='outputLanguageOptEn'>\r\n                            {(message) => <option value='en'>{message}</option>}\r\n                        </FormattedMessage>\r\n                        {inputType === 'uk' && (\r\n                            <>\r\n                                <FormattedMessage id='outputLanguageOptCz'>\r\n                                    {(message) => (\r\n                                        <option value='cz'>{message}</option>\r\n                                    )}\r\n                                </FormattedMessage>\r\n                                <FormattedMessage id='outputLanguageOptPl'>\r\n                                    {(message) => (\r\n                                        <option value='pl' disabled>\r\n                                            {message}\r\n                                        </option>\r\n                                    )}\r\n                                </FormattedMessage>\r\n                            </>\r\n                        )}\r\n                    </select>\r\n                </p>\r\n                <div className='mb-2'>\r\n                    <label htmlFor='inputLanguageTextarea'>\r\n                        <FormattedMessage id='inputLanguagePlaceholder' />\r\n                    </label>\r\n                </div>\r\n                <textarea\r\n                    className='d-block w-100'\r\n                    id='inputLanguageTextarea'\r\n                    onChange={this.handleInputTextChange}\r\n                    value={inputText}\r\n                />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: { appReducer: ControlsState }) => {\r\n    const { inputText, inputType, outputType } = state.appReducer;\r\n\r\n    return {\r\n        inputText,\r\n        inputType,\r\n        outputType,\r\n    };\r\n};\r\n\r\nexport const Controls = connect(mapStateToProps, {\r\n    changeInputType,\r\n    changeOutputType,\r\n    changeInputText,\r\n    changeOutputText,\r\n})(_Controls);\r\n","import czechifyUk from './czechify_uk';\r\nimport englifyUk from './englify_uk';\r\nimport englifyRu from './englify_ru';\r\n\r\nexport const transliterate = (\r\n    text: string,\r\n    inputType: string,\r\n    outputType: string\r\n): string => {\r\n    if (inputType === 'uk') {\r\n        switch (outputType) {\r\n            case 'cz':\r\n                return czechifyUk(text);\r\n            case 'en':\r\n                return englifyUk(text);\r\n        }\r\n    }\r\n\r\n    if (inputType === 'ru') {\r\n        return englifyRu(text);\r\n    }\r\n\r\n    return '';\r\n};\r\n","import React from 'react';\r\nimport { IntlProvider } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport msgs from '../messages';\r\nimport { Header } from './Header';\r\nimport { Controls } from './Controls';\r\nimport { changeAppLanguage } from '../actions';\r\n\r\ninterface AppProps {\r\n    appLanguage: string;\r\n    outputText: string;\r\n    changeAppLanguage(lang: string): void;\r\n}\r\n\r\ninterface AppState {\r\n    appLanguage: string;\r\n    outputText: string;\r\n}\r\n\r\nclass _App extends React.Component<AppProps> {\r\n    handleAppLanguageChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const target = event.target as HTMLSelectElement;\r\n        this.props.changeAppLanguage(target.value);\r\n    };\r\n\r\n    render(): React.ReactNode {\r\n        const { appLanguage, outputText } = this.props;\r\n\r\n        const messages =\r\n            appLanguage === 'en'\r\n                ? msgs.en\r\n                : appLanguage === 'uk'\r\n                ? msgs.uk\r\n                : msgs.ru;\r\n\r\n        return (\r\n            <IntlProvider\r\n                messages={messages}\r\n                locale={appLanguage}\r\n                defaultLocale='en'>\r\n                <Header />\r\n                <Controls />\r\n                <pre>{outputText}</pre>\r\n            </IntlProvider>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: { appReducer: AppState }) => {\r\n    const { appLanguage, outputText } = state.appReducer;\r\n\r\n    return {\r\n        appLanguage,\r\n        outputText,\r\n    };\r\n};\r\n\r\nexport const App = connect(mapStateToProps, { changeAppLanguage })(_App);\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger';\r\nimport { reducers } from './reducers';\r\nimport { App } from './components/App';\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    composeWithDevTools(applyMiddleware(logger))\r\n);\r\n\r\nrender(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}