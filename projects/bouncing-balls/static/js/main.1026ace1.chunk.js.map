{"version":3,"sources":["App.jsx","serviceWorker.js","Ball.js","helpers/index.js","index.jsx"],"names":["App","props","canvasRef","React","createRef","canvas","this","current","width","window","innerWidth","height","innerHeight","drawBalls","balls","context","getContext","clearRect","forEach","ball","rightTouch","bottomTouch","leftTouch","topTouch","safeDistance","radius","doBounceIfNeeded","x","y","toRight","toBottom","fillStyle","color","beginPath","arc","Math","PI","closePath","fill","dx","dy","iteration","className","ref","Component","Boolean","location","hostname","match","Ball","angle","speed","cos","sin","ballHelper","floor","random","setInterval","ReactDOM","render","document","getElementById","counter","addBallInterval","push","clearInterval","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1026ace1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.canvasRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const canvas = this.canvasRef.current;\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n    this.drawBalls();\r\n  }  \r\n\r\n  componentDidUpdate() {\r\n    this.drawBalls();\r\n  }\r\n\r\n  drawBalls() {\r\n    const { balls } = this.props;\r\n    const canvas = this.canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    balls.forEach(ball => {\r\n      const safeDistance = ball.radius * 10;\r\n      context.fillStyle = ball.color;\r\n      context.beginPath();\r\n      context.arc(ball.x, ball.y, ball.radius, 0, 2 * Math.PI);\r\n      context.closePath();\r\n      context.fill();\r\n\r\n      let rightTouch, bottomTouch, leftTouch, topTouch;\r\n      function doBounceIfNeeded() {\r\n        rightTouch = ball.x >= canvas.width - ball.radius;\r\n        bottomTouch = ball.y >= canvas.height - ball.radius;\r\n        leftTouch = ball.x <= ball.radius;\r\n        topTouch = ball.y <= ball.radius;\r\n\r\n        if (rightTouch || leftTouch) {\r\n          ball.toRight = !ball.toRight;\r\n        }\r\n        if (bottomTouch || topTouch) {\r\n          ball.toBottom = !ball.toBottom;\r\n        }\r\n      }\r\n\r\n      if (ball.toRight && ball.toBottom) {\r\n        ball.x += ball.dx;\r\n        ball.y += ball.dy;\r\n        ball.iteration++;\r\n        if (\r\n          ball.iteration >= safeDistance / ball.dy - ball.radius ||\r\n          ball.iteration >= safeDistance / ball.dx - ball.radius\r\n        ) {\r\n          doBounceIfNeeded();\r\n        }\r\n      } else if (!ball.toRight && ball.toBottom) {\r\n        ball.x -= ball.dx;\r\n        ball.y += ball.dy;\r\n        ball.iteration++;\r\n        if (\r\n          ball.iteration >= safeDistance / ball.dy - ball.radius ||\r\n          ball.iteration >= safeDistance / ball.dx - ball.radius\r\n        ) {\r\n          doBounceIfNeeded();\r\n        }\r\n      } else if (!ball.toRight && !ball.toBottom) {\r\n        ball.x -= ball.dx;\r\n        ball.y -= ball.dy;\r\n        ball.iteration++;\r\n        if (\r\n          ball.iteration >= safeDistance / ball.dy - ball.radius ||\r\n          ball.iteration >= safeDistance / ball.dx - ball.radius\r\n        ) {\r\n          doBounceIfNeeded();\r\n        }\r\n      } else if (ball.toRight && !ball.toBottom) {\r\n        ball.x += ball.dx;\r\n        ball.y -= ball.dy;\r\n        ball.iteration++;\r\n        if (\r\n          ball.iteration >= safeDistance / ball.dy - ball.radius ||\r\n          ball.iteration >= safeDistance / ball.dx - ball.radius\r\n        ) {\r\n          doBounceIfNeeded();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return <canvas className=\"canvas\" ref={this.canvasRef}></canvas>;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export default class Ball {\r\n  constructor(color, radius, angle, speed) {\r\n    this.color = color;\r\n    this.radius = radius;\r\n    this.angle = angle;\r\n    this.speed = speed;\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.dx = Math.cos(angle) * speed;\r\n    this.dy = Math.sin(angle) * speed;\r\n    this.toRight = true;\r\n    this.toBottom = true;\r\n    this.iteration = 0;\r\n  }\r\n}\r\n","export const ballHelper = {\r\n  getAngle() {\r\n    let angle;\r\n    do {\r\n      angle = Math.floor(Math.random() * 360);\r\n    } while (Math.cos(angle) <= 0.5 || Math.sin(angle) <= 0.5);\r\n\r\n    return angle;\r\n  },\r\n  getColor() {\r\n    return `rgb(${Math.floor(Math.random() * 255)},${Math.floor(\r\n        Math.random() * 255\r\n      )},${Math.floor(Math.random() * 255)}`;\r\n  },\r\n  getRadius() {\r\n    return Math.floor(Math.random() * 50) + 10;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Ball from './Ball';\r\nimport { ballHelper } from './helpers';\r\n\r\nconst balls = [new Ball(ballHelper.getColor(), ballHelper.getRadius(), ballHelper.getAngle(), 3)];\r\n\r\n// draw balls\r\nsetInterval(() => {\r\n  ReactDOM.render(<App balls={balls} />, document.getElementById('root'));\r\n});\r\n\r\n// add ball\r\nlet counter = 0;\r\nlet addBallInterval = setInterval(() => {\r\n  balls.push(new Ball(ballHelper.getColor(), ballHelper.getRadius(), ballHelper.getAngle(), 3));\r\n  counter++;\r\n  if (counter === 20) {\r\n    clearInterval(addBallInterval);\r\n  }\r\n}, 5000);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}